import numpy as np

"""
副本与视图------------------------------------------------------------------------------
在 Numpy 中，尤其是在做数组运算或数组操作时:
返回结果不是数组的 副本 就是 视图。
所有赋值运算不会为数组和数组中的任何元素创建副本。

副本：
numpy.ndarray.copy() 
numpy.delete 
函数创建一个 副本 
对副本数据进行修改，不会影响到原始数据，它们物理内存不在同一位置。

视图：
数组 切片 操作返回的对象只是原数组的视图。

索引与切片--------------------------------------------------------------------------------
数组索引机制指的是用方括号（[]）加序号的形式引用单个数组元素，它的用处很多，比如抽取元素，选取数组的几个元素，甚至为其赋一个新值。

整数索引
要获取数组的单个元素，指定元素的索引即可。

import numpy as np

x[2]     # [21 22 23 24 25]
x[2][1]  # 22
x[2, 1]  # 22 建议习惯在一个[]中索引
arr[dim_1, dim_2, ...]

切片索引**************************
切片操作是指抽取数组的一部分元素生成新数组。
对 python 列表进行切片操作得到的数组是原数组的副本，
而对 Numpy 数据进行切片操作得到的数组则是指向相同缓冲区的视图。

如果想抽取（或查看）数组的一部分，使用切片语法：
把几个用冒号（ start:stop:step ）隔开的数字置于方括号（[]）内。
[start, stop)

如省去第一个数字，numpy 会认为第一个数字是0；
如省去第二个数字，numpy 则会认为第二个数字是数组的最大索引值；
如省去最后一个数字，它将会被理解为1，也就是抽取所有元素而不再考虑间隔。


dots 索引**************
NumPy 允许使用...表示足够多的冒号来构建完整的索引列表。

比如，如果 x 是 5 维数组：

x[1,2,...] 等于 x[1,2,:,:,:]
x[...,3] 等于 x[:,:,:,:,3]
x[4,...,5,:] 等于 x[4,:,:,5,:]


整数数组索引**************************
方括号内传入多个索引值，可以同时选择多个元素。
可以借助切片:与整数数组组合。

应注意：使用切片索引到numpy数组时，
生成的数组视图将始终是原始数组的子数组, 
但是整数数组索引，不是其子数组，是形成新的数组。

***************************************
numpy. take(a, indices, axis=None, out=None, mode='raise')
 Take elements from an array along an axis.
- `a`: 这是输入的数组，你想要从中获取元素的数组。
- `indices`: 这是一个表示要获取哪些元素的索引数组。可以是整数、切片或者整数数组。
- `axis`（可选）：这是一个表示在哪个轴上获取元素的整数值。如果不指定，将会展平整个数组并获取元素。
- `out`（可选）：这是一个用于存储结果的可选输出数组。
- `mode`（可选）：这是一个用于指定如何处理索引超出范围的模式。
默认值是 'raise'，如果索引超出范围，将会引发异常。
其他可选值包括 'wrap'（循环获取）和 'clip'（将索引裁剪到合法范围内）。


布尔索引****************************
我们可以通过一个布尔数组来索引目标数组。
对整体的矩阵进行逻辑运算会生成形状相同的数组

数组迭代-------------------------------------------------------
除了for循环，Numpy 还提供另外一种更为优雅的遍历方法：
apply_along_axis(func1d, axis, arr)
func 是要应用在数组上的函数。
axis 是要沿着应用的轴，输入是一个整数。例如，对于一个二维数组，axis=0 对应行，axis=1 对应列。
arr 是输入的数组。

"""
# 交换数组arr中的列1和列3 V
arr = np.arange(9).reshape(3, 3)
print(arr)
# tmp = np.array(arr[:,0])    # 副本
# arr[:,0] = arr[:,1]     # 整列赋值
# arr[:,1] = tmp
x = arr[:, [2, 1, 0]]   # start=2 end=1 反着取，得到反转表示的视图
print(x)

# 反转二维数组arr的列
arr = np.arange(9).reshape(3, 3)
print(arr)

x = arr[:, ::-1]    # 步长为-1会得到相应维度反转的视图
print(x)

